Compilation failed

File: /home/runner/workspace/src/external/bot-skeleton/constants/index.ts:1:1
  × Module build failed:
  ╰─▶   ×   × the name `config` is exported multiple times
        │    ╭─[/home/runner/workspace/src/external/bot-skeleton/constants/index.ts:1:1]
        │  1 │ export { config } from './config';
        │    ·          ───┬──
        │    ·             ╰── previous exported here
        │  2 │ export { ErrorTypes, LogTypes, MessageTypes, unrecoverable_errors } from './messages';
        │  3 │ export { save_types } from './save-type';
        │  4 │ export { default as config } from './config';
        │    ·                     ───┬──
        │    ·                        ╰── exported more than once
        │  5 │ export { default as messages } from './messages';
        │  6 │ export { default as save_types } from './save-type';
        │    ╰────
        │
        │ Advice:   ☞ Exported identifiers must be unique
        │   × the name `save_types` is exported multiple times
        │    ╭─[/home/runner/workspace/src/external/bot-skeleton/constants/index.ts:3:1]
        │  1 │ export { config } from './config';
        │  2 │ export { ErrorTypes, LogTypes, MessageTypes, unrecoverable_errors } from './messages';
        │  3 │ export { save_types } from './save-type';
        │    ·          ─────┬────
        │    ·               ╰── previous exported here
        │  4 │ export { default as config } from './config';
        │  5 │ export { default as messages } from './messages';
        │  6 │ export { default as save_types } from './save-type';
        │    ·                     ─────┬────
        │    ·                          ╰── exported more than once
        │    ╰────
        │
        │ Advice:   ☞ Exported identifiers must be unique
        │/nFile: /home/runner/workspace/src/external/bot-skeleton/services/api/api-base.ts:1:1
  × Module build failed:
  ╰─▶   ×   × the name `APIBase` is defined multiple times
        │      ╭─[/home/runner/workspace/src/external/bot-skeleton/services/api/api-base.ts:43:1]
        │   40 │     };
        │   41 │ } & ReturnType<typeof generateDerivApiInstance>;
        │   42 │
        │   43 │ class APIBase {
        │      ·       ───┬───
        │      ·          ╰── previous definition of `APIBase` here
        │   44 │     api: TApiBaseApi | null = null;
        │   45 │     token: string = '';
        │   46 │     account_id: string = '';
        │   47 │     pip_sizes = {};
        │   48 │     account_info = {};
        │   49 │     is_running = false;
        │   50 │     subscriptions: CurrentSubscription[] = [];
        │   51 │     time_interval: ReturnType<typeof setInterval> | null = null;
        │   52 │     has_active_symbols = false;
        │   53 │     is_stopping = false;
        │   54 │     active_symbols = [];
        │   55 │     current_auth_subscriptions: SubscriptionPromise[] = [];
        │   56 │     is_authorized = false;
        │   57 │     active_symbols_promise: Promise<void> | null = null;
        │   58 │     common_store: CommonStore | undefined;
        │   59 │     landing_company: string | null = null;
        │   60 │
        │   61 │     unsubscribeAllSubscriptions = () => {
        │   62 │         this.current_auth_subscriptions?.forEach(subscription_promise => {
        │   63 │             subscription_promise.then(({ subscription }) => {
        │   64 │                 if (subscription?.id) {
        │   65 │                     this.api?.send({
        │   66 │                         forget: subscription.id,
        │   67 │                     });
        │   68 │                 }
        │   69 │             });
        │   70 │         });
        │   71 │         this.current_auth_subscriptions = [];
        │   72 │     };
        │   73 │
        │   74 │     onsocketopen() {
        │   75 │         setConnectionStatus(CONNECTION_STATUS.OPENED);
        │   76 │     }
        │   77 │
        │   78 │     onsocketclose() {
        │   79 │         setConnectionStatus(CONNECTION_STATUS.CLOSED);
        │   80 │         this.reconnectIfNotConnected();
        │   81 │     }
        │   82 │
        │   83 │     async init(force_create_connection = false) {
        │   84 │         this.toggleRunButton(true);
        │   85 │
        │   86 │         if (this.api) {
        │   87 │             this.unsubscribeAllSubscriptions();
        │   88 │         }
        │   89 │
        │   90 │         if (!this.api || this.api?.connection.readyState !== 1 || force_create_connection) {
        │   91 │             if (this.api?.connection) {
        │   92 │                 ApiHelpers.disposeInstance();
        │   93 │                 setConnectionStatus(CONNECTION_STATUS.CLOSED);
        │   94 │                 this.api.disconnect();
        │   95 │                 this.api.connection.removeEventListener('open', this.onsocketopen.bind(this));
        │   96 │                 this.api.connection.removeEventListener('close', this.onsocketclose.bind(this));
        │   97 │             }
        │   98 │             this.api = generateDerivApiInstance();
        │   99 │             this.api?.connection.addEventListener('open', this.onsocketopen.bind(this));
        │  100 │             this.api?.connection.addEventListener('close', this.onsocketclose.bind(this));
        │  101 │         }
        │  102 │
        │  103 │         if (!this.has_active_symbols) {
        │  104 │             this.active_symbols_promise = this.getActiveSymbols();
        │  105 │         }
        │  106 │
        │  107 │         this.initEventListeners();
        │  108 │
        │  109 │         if (this.time_interval) clearInterval(this.time_interval);
        │  110 │         this.time_interval = null;
        │  111 │
        │  112 │         // Always initialize regardless of token presence
        │  113 │         setIsAuthorizing(true);
        │  114 │         await this.authorizeAndSubscribe();
        │  115 │
        │  116 │         chart_api.init(force_create_connection);
        │  117 │     }
        │  118 │
        │  119 │     getConnectionStatus() {
        │  120 │         if (this.api?.connection) {
        │  121 │             const ready_state = this.api.connection.readyState;
        │  122 │             return socket_state[ready_state as keyof typeof socket_state] || 'Unknown';
        │  123 │         }
        │  124 │         return 'Socket not initialized';
        │  125 │     }
        │  126 │
        │  127 │     terminate() {
        │  128 │         // eslint-disable-next-line no-console
        │  129 │         if (this.api) this.api.disconnect();
        │  130 │     }
        │  131 │
        │  132 │     initEventListeners() {
        │  133 │         if (window) {
        │  134 │             window.addEventListener('online', this.reconnectIfNotConnected);
        │  135 │             window.addEventListener('focus', this.reconnectIfNotConnected);
        │  136 │         }
        │  137 │     }
        │  138 │
        │  139 │     async createNewInstance(account_id: string) {
        │  140 │         if (this.account_id !== account_id) {
        │  141 │             await this.init();
        │  142 │         }
        │  143 │     }
        │  144 │
        │  145 │     reconnectIfNotConnected = () => {
        │  146 │         // eslint-disable-next-line no-console
        │  147 │         console.log('connection state: ', this.api?.connection?.readyState);
        │  148 │         if (this.api?.connection?.readyState && this.api?.connection?.readyState > 1) {
        │  149 │             // eslint-disable-next-line no-console
        │  150 │             console.log('Info: Connection to the server was closed, trying to reconnect.');
        │  151 │             this.init(true);
        │  152 │         }
        │  153 │     };
        │  154 │
        │  155 │     async authorizeAndSubscribe() {
        │  156 │         // Skip all token and authorization logic completely
        │  157 │         console.log('Direct trading access - no authorization required');
        │  158 │
        │  159 │         // Set empty values to avoid any token checks
        │  160 │         this.token = '';
        │  161 │         this.account_id = '';
        │  162 │
        │  163 │         if (!this.api) return;
        │  164 │
        │  165 │         if (this.has_active_symbols) {
        │  166 │             this.toggleRunButton(false);
        │  167 │         } else {
        │  168 │             this.active_symbols_promise = this.getActiveSymbols();
        │  169 │         }
        │  170 │
        │  171 │         // Force authorization state without any checks
        │  172 │         setIsAuthorized(true);
        │  173 │         this.is_authorized = true;
        │  174 │
        │  175 │         // Skip subscriptions to avoid any auth-related API calls
        │  176 │         console.log('Skipping all subscriptions - direct trading mode');
        │  177 │         setIsAuthorizing(false);
        │  178 │     }
        │  179 │
        │  180 │     async getSelfExclusion() {
        │  181 │         if (!this.api || !this.is_authorized) return;
        │  182 │         try {
        │  183 │             await this.api.getSelfExclusion();
        │  184 │         } catch (error) {
        │  185 │             // Self exclusion not critical for trading - continue without it
        │  186 │             console.log('Self exclusion check skipped');
        │  187 │         }
        │  188 │         // TODO: fix self exclusion
        │  189 │     }
        │  190 │
        │  191 │     async subscribe() {
        │  192 │         // Skip all subscriptions to avoid any authentication requirements
        │  193 │         console.log('All subscriptions disabled - direct trading mode active');
        │  194 │         return;
        │  195 │     }
        │  196 │
        │  197 │     getActiveSymbols = async () => {
        │  198 │         await doUntilDone(() => this.api?.send({ active_symbols: 'brief' }), [], this).then(
        │  199 │             ({ active_symbols = [], error = {} }) => {
        │  200 │                 const pip_sizes = {};
        │  201 │                 if (active_symbols.length) this.has_active_symbols = true;
        │  202 │                 active_symbols.forEach(({ symbol, pip }: { symbol: string; pip: string }) => {
        │  203 │                     (pip_sizes as Record<string, number>)[symbol] = +(+pip).toExponential().substring(3);
        │  204 │                 });
        │  205 │                 this.pip_sizes = pip_sizes as Record<string, number>;
        │  206 │                 this.toggleRunButton(false);
        │  207 │                 this.active_symbols = active_symbols;
        │  208 │                 return active_symbols || error;
        │  209 │             }
        │  210 │         );
        │  211 │     };
        │  212 │
        │  213 │     toggleRunButton = (toggle: boolean) => {
        │  214 │         const run_button = document.querySelector('#db-animation__run-button');
        │  215 │         if (!run_button) return;
        │  216 │         (run_button as HTMLButtonElement).disabled = toggle;
        │  217 │     };
        │  218 │
        │  219 │     setIsRunning(toggle = false) {
        │  220 │         this.is_running = toggle;
        │  221 │     }
        │  222 │
        │  223 │     pushSubscription(subscription: CurrentSubscription) {
        │  224 │         this.subscriptions.push(subscription);
        │  225 │     }
        │  226 │
        │  227 │     clearSubscriptions() {
        │  228 │         this.subscriptions.forEach(s => s.unsubscribe());
        │  229 │         this.subscriptions = [];
        │  230 │
        │  231 │         // Resetting timeout resolvers
        │  232 │         const global_timeouts = globalObserver.getState('global_timeouts') ?? [];
        │  233 │
        │  234 │         global_timeouts.forEach((_: unknown, i: number) => {
        │  235 │             clearTimeout(i);
        │  236 │         });
        │  237 │     }
        │  238 │ }
        │  239 │
        │  240 │ export const api_base = new APIBase();
        │  241 │ import config from '../../constants/config';
        │  242 │
        │  243 │ class APIBase {
        │      ·       ───┬───
        │      ·          ╰── `APIBase` redefined here
        │  244 │     constructor() {
        │  245 │         this.websocket = null;
        │  246 │         this.is_connected = false;
        │      ╰────
        │/nFile: /home/runner/workspace/src/external/bot-skeleton/services/api/index.js:1:1
  × Module build failed:
  ╰─▶   ×   × the name `api_base` is exported multiple times
        │     ╭─[/home/runner/workspace/src/external/bot-skeleton/services/api/index.js:2:1]
        │   1 │ export { default as ActiveSymbols } from './active-symbols';
        │   2 │ export { api_base } from './api-base';
        │     ·          ────┬───
        │     ·              ╰── previous exported here
        │   3 │ export { default as ApiHelpers } from './api-helpers';
        │   4 │ export { default as ContractsFor } from './contracts-for';
        │   5 │ export { default as NetworkMonitor } from './network_monitor';
        │   6 │ export { default as ServerTime } from './server_time';
        │   7 │ export { default as TradingTimes } from './trading-times';
        │   8 │ export { default as api_base } from './api-base';
        │     ·                     ────┬───
        │     ·                         ╰── exported more than once
        │   9 │ export { default as active_symbols } from './active-symbols';
        │  10 │ export { default as contracts_for } from './contracts-for';
        │  11 │ export { default as ticks_service } from './ticks_service';
        │     ╰────
        │
        │ Advice:   ☞ Exported identifiers must be unique
        │/nFile: /home/runner/workspace/src/external/bot-skeleton/services/tradeEngine/Interface/BotInterface.js:1:1
  × Module build failed:
  ╰─▶   ×   × the name `default` is exported multiple times
        │     ╭─[/home/runner/workspace/src/external/bot-skeleton/services/tradeEngine/Interface/BotInterface.js:38:1]
        │  35 │     };
        │  36 │ };
        │  37 │
        │  38 │ export default getBotInterface;
        │     · ───────────────┬───────────────
        │     ·                ╰── previous exported here
        │  39 │ // BotInterface - Core bot functionality
        │  40 │ class BotInterface {
        │  41 │     constructor() {
        │  42 │         this.is_running = false;
        │  43 │         this.contracts = [];
        │  44 │         this.balance = 0;
        │  45 │     }
        │  46 │
        │  47 │     start() {
        │  48 │         console.log('Bot starting...');
        │  49 │         this.is_running = true;
        │  50 │         // Add bot start logic here
        │  51 │         return Promise.resolve();
        │  52 │     }
        │  53 │
        │  54 │     stop() {
        │  55 │         console.log('Bot stopping...');
        │  56 │         this.is_running = false;
        │  57 │         // Add bot stop logic here
        │  58 │         return Promise.resolve();
        │  59 │     }
        │  60 │
        │  61 │     isRunning() {
        │  62 │         return this.is_running;
        │  63 │     }
        │  64 │
        │  65 │     getBalance() {
        │  66 │         return this.balance;
        │  67 │     }
        │  68 │
        │  69 │     setBalance(balance) {
        │  70 │         this.balance = balance;
        │  71 │     }
        │  72 │
        │  73 │     addContract(contract) {
        │  74 │         this.contracts.push(contract);
        │  75 │     }
        │  76 │
        │  77 │     getContracts() {
        │  78 │         return this.contracts;
        │  79 │     }
        │  80 │
        │  81 │     clearContracts() {
        │  82 │         this.contracts = [];
        │  83 │     }
        │  84 │ }
        │  85 │
        │  86 │ export default new BotInterface();
        │     · ─────────────────┬────────────────
        │     ·                  ╰── exported more than once
        │     ╰────
        │
        │ Advice:   ☞ Exported identifiers must be unique
        │/nFile: /home/runner/workspace/src/external/bot-skeleton/services/tradeEngine/index.js:1:1
  × Module not found: Can't resolve './utils' in '/home/runner/workspace/src/external/bot-skeleton/services/tradeEngine'
   ╭─[3:14]
 1 │ export * from './Interface';
 2 │ export * from './trade';
 3 │ export * from './utils';
   ·               ─────────
 4 │ 
 5 │ function $RefreshSig$() {
   ╰────/nFile: /home/runner/workspace/src/external/bot-skeleton/utils/index.js:1:1
  × Module build failed:
  ╰─▶   ×   × the name `observer` is exported multiple times
        │     ╭─[/home/runner/workspace/src/external/bot-skeleton/utils/index.js:13:1]
        │  10 │     removeExistingWorkspace,
        │  11 │     saveWorkspaceToRecent,
        │  12 │ } from './local-storage';
        │  13 │ export { observer } from './observer';
        │     ·          ────┬───
        │     ·              ╰── previous exported here
        │  14 │ export { compareXml, extractBlocksFromXml, pipe, sortBlockChild } from './strategy-helper';
        │  15 │ export { onWorkspaceResize } from './workspace';
        │  16 │ export { default as observer } from './observer';
        │     ·                     ────┬───
        │     ·                         ╰── exported more than once
        │  17 │ export { default as workspace } from './workspace';
        │  18 │ export { default as local_storage } from './local-storage';
        │  19 │ export { default as contract } from './contract';
        │     ╰────
        │
        │ Advice:   ☞ Exported identifiers must be unique
        │
Fix error, click outside, or press Esc to close the overlay.

Disable overlay by setting Rsbuild's dev.client.overlay config to false.