// Load recommendation directly to Bot Builder (similar to ML Trader)
const loadToBotBuilder = useCallback(async (recommendation: TradeRecommendation) => {
    try {
        console.log('üöÄ Loading recommendation to Bot Builder:', recommendation);

        // Get symbol display name
        const displayName = symbolMap[recommendation.symbol] || recommendation.symbol;

        // Determine contract type based on strategy
        let contractType = 'DIGITOVER';
        if (recommendation.strategy === 'under') contractType = 'DIGITUNDER';
        else if (recommendation.strategy === 'even') contractType = 'DIGITEVEN';
        else if (recommendation.strategy === 'odd') contractType = 'DIGITODD';
        else if (recommendation.strategy === 'matches') contractType = 'DIGITMATCH';
        else if (recommendation.strategy === 'differs') contractType = 'DIGITDIFF';

        // Default settings
        const defaultStake = 0.5;
        const defaultDuration = 1;
        const defaultDurationUnit = 't'; // ticks
        const barrier = recommendation.barrier;
        let prediction = null;

        if (recommendation.strategy === 'over' || recommendation.strategy === 'under') {
            prediction = parseInt(recommendation.barrier || '5');
        } else if (recommendation.strategy === 'matches' || recommendation.strategy === 'differs') {
            prediction = parseInt(recommendation.barrier || '5');
        }

        // Generate Bot Builder XML
        const botSkeletonXML = `<xml xmlns="https://developers.google.com/blockly/xml" is_dbot="true" collection="false">
  <variables>
    <variable id="Stake">Stake</variable>
    <variable id="Result_is">Result_is</variable>
    <variable id="Martingale_Multiplier">Martingale_Multiplier</variable>
  </variables>

  <!-- Trade Definition Block -->
  <block type="trade_definition" id="trade_definition_main" deletable="false" x="0" y="60">
    <statement name="TRADE_OPTIONS">
      <block type="trade_definition_market" id="market_block" deletable="false" movable="false">
        <field name="MARKET_LIST">synthetic_index</field>
        <field name="SUBMARKET_LIST">continuous_indices</field>
        <field name="SYMBOL_LIST">${recommendation.symbol}</field>
        <!-- ... rest of XML structure ... -->
      </block>
    </statement>
  </block>
</xml>`;

        console.log('üìÑ Loading Trading Hub strategy to Bot Builder...');

        // Switch to Bot Builder tab
        store.dashboard.setActiveTab(1);

        // Wait for tab switch and load the strategy
        setTimeout(async () => {
            try {
                // Import bot skeleton functions
                const { load } = await import('@/external/bot-skeleton');
                const { save_types } = await import('@/external/bot-skeleton/constants/save-type');

                // Load to workspace
                if (window.Blockly?.derivWorkspace) {
                    console.log('üì¶ Loading Trading Hub strategy to workspace...');

                    await load({
                        block_string: botSkeletonXML,
                        file_name: `TradingHub_${displayName}_${recommendation.strategy.toUpperCase()}_${Date.now()}`,
                        workspace: window.Blockly.derivWorkspace,
                        from: save_types.UNSAVED,
                        drop_event: null,
                        strategy_id: null,
                        showIncompatibleStrategyDialog: null,
                    });

                    // Center workspace
                    window.Blockly.derivWorkspace.scrollCenter();
                    console.log('‚úÖ Trading Hub strategy loaded to workspace');

                } else {
                    console.warn('‚ö†Ô∏è Blockly workspace not ready, using fallback method');
                    // Fallback method implementation...
                }
            } catch (loadError) {
                console.error('‚ùå Error loading Trading Hub strategy:', loadError);
                // Fallback implementation...
            }
        }, 300);

    } catch (error) {
        console.error('Error loading recommendation to Bot Builder:', error);
    }
}, [store.dashboard]);