Compilation failed

File: /home/runner/workspace/src/components/matrix-loading/matrix-loading.tsx:1:1
  × Module build failed:
  ╰─▶   ×   × the name `MatrixLoading` is defined multiple times
        │     ╭─[/home/runner/workspace/src/components/matrix-loading/matrix-loading.tsx:9:1]
        │   6 │     show?: boolean;
        │   7 │ }
        │   8 │
        │   9 │ const MatrixLoading: React.FC<MatrixLoadingProps> = ({ message = 'Loading...', show = true }) => {
        │     ·       ──────┬──────
        │     ·             ╰── previous definition of `MatrixLoading` here
        │  10 │     const [progress, setProgress] = useState(0);
        │  11 │
        │  12 │     useEffect(() => {
        │  13 │         if (!show) return;
        │  14 │
        │  15 │         console.log(`🔄 Matrix Loading started: ${message}`);
        │  16 │
        │  17 │         const interval = setInterval(() => {
        │  18 │             setProgress(prev => {
        │  19 │                 if (prev >= 100) {
        │  20 │                     console.warn('⚠️ Matrix loading reached 100% but still showing - this might indicate a stuck state');
        │  21 │                     return 100;
        │  22 │                 }
        │  23 │                 return prev + 1;
        │  24 │             });
        │  25 │         }, 100);
        │  26 │
        │  27 │         // Timeout after 30 seconds
        │  28 │         const timeout = setTimeout(() => {
        │  29 │             console.error('❌ Matrix loading timeout - forcing hide');
        │  30 │             clearInterval(interval);
        │  31 │         }, 30000);
        │  32 │
        │  33 │         return () => {
        │  34 │             clearInterval(interval);
        │  35 │             clearTimeout(timeout);
        │  36 │         };
        │  37 │     }, [show, message]);
        │  38 │
        │  39 │     if (!show) return null;
        │  40 │
        │  41 │     return (
        │  42 │         <div className="matrix-loading">
        │  43 │             <div className="matrix-text">{message}</div>
        │  44 │             <div className="progress-bar">
        │  45 │                 <div
        │  46 │                     className="progress-fill"
        │  47 │                     style={{ width: `${progress}%` }}
        │  48 │                 />
        │  49 │             </div>
        │  50 │             <div className="status-text">
        │  51 │                 System Status: ACTIVE • Scanning Markets...
        │  52 │             </div>
        │  53 │         </div>
        │  54 │     );
        │  55 │ };
        │  56 │
        │  57 │ export default MatrixLoading;
        │  58 │
        │  59 │ interface MatrixLoadingProps {
        │  60 │     message?: string;
        │  61 │     show?: boolean;
        │  62 │ }
        │  63 │
        │  64 │ const MatrixLoading: React.FC<MatrixLoadingProps> = ({
        │     ·       ──────┬──────
        │     ·             ╰── `MatrixLoading` redefined here
        │  65 │     message = 'Initializing Deriv Bot...',
        │  66 │     show = true
        │  67 │ }) => {
        │     ╰────
        │   × the name `default` is exported multiple times
        │      ╭─[/home/runner/workspace/src/components/matrix-loading/matrix-loading.tsx:57:1]
        │   54 │     );
        │   55 │ };
        │   56 │
        │   57 │ export default MatrixLoading;
        │      · ──────────────┬──────────────
        │      ·               ╰── previous exported here
        │   58 │
        │   59 │ interface MatrixLoadingProps {
        │   60 │     message?: string;
        │   61 │     show?: boolean;
        │   62 │ }
        │   63 │
        │   64 │ const MatrixLoading: React.FC<MatrixLoadingProps> = ({
        │   65 │     message = 'Initializing Deriv Bot...',
        │   66 │     show = true
        │   67 │ }) => {
        │   68 │     const [currentStep, setCurrentStep] = useState(0);
        │   69 │     const [progress, setProgress] = useState(0);
        │   70 │
        │   71 │     const scanningSteps = [
        │   72 │         'Initializing Deriv Bot...',
        │   73 │         'Connecting to servers...',
        │   74 │         'Scanning market data...',
        │   75 │         'Loading trading engine...',
        │   76 │         'Preparing workspace...'
        │   77 │     ];
        │   78 │
        │   79 │     useEffect(() => {
        │   80 │         if (!show) return;
        │   81 │
        │   82 │         const stepInterval = setInterval(() => {
        │   83 │             setCurrentStep((prev) => (prev + 1) % scanningSteps.length);
        │   84 │         }, 1000);
        │   85 │
        │   86 │         const progressInterval = setInterval(() => {
        │   87 │             setProgress((prev) => {
        │   88 │                 if (prev >= 100) return 0;
        │   89 │                 return prev + 2;
        │   90 │             });
        │   91 │         }, 100);
        │   92 │
        │   93 │         return () => {
        │   94 │             clearInterval(stepInterval);
        │   95 │             clearInterval(progressInterval);
        │   96 │         };
        │   97 │     }, [show]);
        │   98 │
        │   99 │     const generateMatrixChars = () => {
        │  100 │         const chars = '01アイウエオカキクケコサシスセソタチツテトナニヌネノハヒフヘホマミムメモヤユヨラリルレロワヲン';
        │  101 │         const columns = 50;
        │  102 │         const matrixColumns = [];
        │  103 │
        │  104 │         for (let i = 0; i < columns; i++) {
        │  105 │             const columnChars = [];
        │  106 │             const charCount = Math.floor(Math.random() * 20) + 10;
        │  107 │
        │  108 │             for (let j = 0; j < charCount; j++) {
        │  109 │                 columnChars.push(chars[Math.floor(Math.random() * chars.length)]);
        │  110 │             }
        │  111 │
        │  112 │             matrixColumns.push(
        │  113 │                 <div
        │  114 │                     key={i}
        │  115 │                     className="matrix-column"
        │  116 │                     style={{
        │  117 │                         left: `${(i / columns) * 100}%`,
        │  118 │                         animationDelay: `${Math.random() * 2}s`,
        │  119 │                         animationDuration: `${3 + Math.random() * 2}s`
        │  120 │                     }}
        │  121 │                 >
        │  122 │                     {columnChars.join('')}
        │  123 │                 </div>
        │  124 │             );
        │  125 │         }
        │  126 │
        │  127 │         return matrixColumns;
        │  128 │     };
        │  129 │
        │  130 │     if (!show) return null;
        │  131 │
        │  132 │     return (
        │  133 │         <div className="matrix-loading">
        │  134 │             <div className="matrix-rain">
        │  135 │                 {generateMatrixChars()}
        │  136 │             </div>
        │  137 │
        │  138 │             <div className="loading-content">
        │  139 │                 <div className="scanning-text">
        │  140 │                     TradeCortex AI
        │  141 │                 </div>
        │  142 │
        │  143 │                 <div className="scanning-lines">
        │  144 │                     {scanningSteps.map((step, index) => (
        │  145 │                         <div
        │  146 │                             key={index}
        │  147 │                             className={`scan-line ${index === currentStep ? 'active' : ''}`}
        │  148 │                         >
        │  149 │                             {index === currentStep && '> '}{step}
        │  150 │                         </div>
        │  151 │                     ))}
        │  152 │                 </div>
        │  153 │
        │  154 │                 <div className="progress-bar">
        │  155 │                     <div
        │  156 │                         className="progress-fill"
        │  157 │                         style={{ width: `${progress}%` }}
        │  158 │                     />
        │  159 │                 </div>
        │  160 │
        │  161 │                 <div className="status-text">
        │  162 │                     System Status: ACTIVE • Scanning Markets...
        │  163 │                 </div>
        │  164 │             </div>
        │  165 │         </div>
        │  166 │     );
        │  167 │ };
        │  168 │
        │  169 │ export default MatrixLoading;
        │      · ──────────────┬──────────────
        │      ·               ╰── exported more than once
        │      ╰────
        │
        │ Advice:   ☞ Exported identifiers must be unique
        │
Fix error, click outside, or press Esc to close the overlay.

Disable overlay by setting Rsbuild's dev.client.overlay config to false