Ml-trader-integration-bundle

import React, { useEffect, useState } from 'react'; import { MLTickAnalyzer } from '@/services/ml-tick-analyzer'; import { derivBotAPI } from '@/services/deriv-bot-interface'; import { LineChart, Line, XAxis, YAxis, Tooltip, CartesianGrid, ResponsiveContainer } from 'recharts';

interface MLTraderProps { selectedSymbol: string; autoTradeEnabled: boolean; tradeSettings: { duration: number; stake: number; }; tickStreamManager: any; derivVolatilityScanner: any; momentumAnalyzer: any; }

export const MLTrader: React.FC = ({ selectedSymbol, autoTradeEnabled, tradeSettings, tickStreamManager, derivVolatilityScanner, momentumAnalyzer, }) => { const [recommendation, setRecommendation] = useState(null); const [mlAnalyzer] = useState(() => new MLTickAnalyzer('https://your-replit-url.repl.co/predict')); const [confidenceHistory, setConfidenceHistory] = useState<{ time: string; confidence: number; direction: string }[]>([]);

useEffect(() => { let isRunning = true;

async function runAnalysisLoop() {
    try {
      const recentTicks = tickStreamManager.getRecentTicks(selectedSymbol, 100);
      if (!recentTicks || recentTicks.length < 20) {
        await new Promise((res) => setTimeout(res, 1000));
        continue;
      }


      // Run traditional analysis
      const multiTimeframe = derivVolatilityScanner.analyze(selectedSymbol, recentTicks);
      const momentum = momentumAnalyzer.calculate(selectedSymbol, recentTicks);
      const volatility = multiTimeframe.volatility;


      // 🔍 Run ML prediction
      const mlPrediction = await mlAnalyzer.processTickStream(recentTicks);
      const enhancedAnalysis = {
        ...multiTimeframe,
        mlDirection: mlPrediction.direction,
        mlConfidence: mlPrediction.confidence * 100,
        momentumScore: momentum.score,
      };


      // 🧮 Combined Entry Score
      const entryScore =
        multiTimeframe.alignment.score * 0.4 +
        momentum.score * 0.3 +
        enhancedAnalysis.mlConfidence * 0.2 +
        (100 - volatility * 100) * 0.1;


      const rec = {
        direction: enhancedAnalysis.mlDirection,
        confidence: enhancedAnalysis.mlConfidence,
        entryScore,
      };


      setRecommendation(rec);


      const timestamp = new Date().toLocaleTimeString();
      setConfidenceHistory((prev) =>
        [...prev.slice(-50), { time: timestamp, confidence: rec.confidence, direction: rec.direction }]
      );


      // 🤖 Auto-trade trigger
      if (
        autoTradeEnabled &&
        rec.confidence >= 75 &&
        rec.entryScore >= 65
      ) {
        const contractType = rec.direction === 'RISE' ? 'CALL' : 'PUT';


        console.log(
          `Auto-trade signal confirmed: ${contractType} with ${rec.confidence.toFixed(
            2
          )}% confidence.`
        );


        await derivBotAPI.placeTrade({
          symbol: selectedSymbol,
          contract_type: contractType,
          duration: tradeSettings.duration || 5,
          amount: tradeSettings.stake || 1,
        });
      }


      await new Promise((res) => setTimeout(res, 2000)); // analyze every 2s
    } catch (err) {
      console.error('Analysis loop error:', err);
      await new Promise((res) => setTimeout(res, 2000));
    }
  }
}


runAnalysisLoop();


return () => {
  isRunning = false;
  console.log('MLTrader stopped');
};

}, [selectedSymbol, autoTradeEnabled]);

return ( ML Trader — {selectedSymbol} {recommendation ? ( Direction: <b className={recommendation.direction === 'RISE' ? 'text-green-400' : 'text-red-400'}> {recommendation.direction} Confidence: {recommendation.confidence.toFixed(2)}% Entry Score: {recommendation.entryScore.toFixed(2)} ) : ( Awaiting analysis... )}

  {/* 📊 Confidence Chart */}
  <div className="mt-4 bg-gray-800 p-3 rounded-xl">
    <h3 className="text-sm font-semibold mb-2 text-gray-300">Confidence Trend (Last 50)</h3>
    <ResponsiveContainer width="100%" height={200}>
      <LineChart data={confidenceHistory}>
        <CartesianGrid strokeDasharray="3 3" stroke="#555" />
        <XAxis dataKey="time" hide={true} />
        <YAxis domain={[0, 100]} tick={{ fill: '#ccc', fontSize: 10 }} />
        <Tooltip
          formatter={(value: number, name: string, entry: any) => [value.toFixed(2) + '%', entry.payload.direction]}
          labelStyle={{ color: '#fff' }}
          contentStyle={{ backgroundColor: '#222', borderRadius: '8px' }}
        />
        <Line
          type="monotone"
          dataKey="confidence"
          stroke="#00ff88"
          strokeWidth={2}
          dot={false}
          isAnimationActive={false}
        />
      </LineChart>
    </ResponsiveContainer>
  </div>
</div>

); };

✅ The MLTrader file now includes a real-time visual dashboard — displaying confidence trends in a live line chart, direction indicators, and entry score updates.