 here’s how you can patch your WorkspaceSvg.dispose flow so the
ThemeManager.unsubscribeWorkspace call only happens when the workspace was actually subscribed.

1️⃣ Find the dispose method in your Blockly wrapper
In your case, the stack trace shows it’s in:

swift
Copy
Edit
WorkspaceSvg$$module$build$src$core$workspace_svg.dispose
Inside that method, you’ll see something like:

javascript
Copy
Edit
dispose() {
    ThemeManager.unsubscribeWorkspace(this);
    // other cleanup...
}
2️⃣ Add a safety check
If you control this file directly, modify it:

javascript
Copy
Edit
dispose() {
    try {
        if (this && this.theme && ThemeManager && ThemeManager.isWorkspaceSubscribed?.(this)) {
            ThemeManager.unsubscribeWorkspace(this);
        }
    } catch (err) {
        console.warn("Workspace unsubscribe skipped:", err.message);
    }

    // Continue with the rest of dispose
    // ...
}
3️⃣ If ThemeManager.isWorkspaceSubscribed doesn’t exist
Deriv’s ThemeManager might not have a helper method, so you can track it manually.

In the code where you create the workspace:

javascript
Copy
Edit
let isWorkspaceSubscribed = false;

function subscribeWorkspaceSafe(workspace) {
    ThemeManager.subscribeWorkspace(workspace);
    isWorkspaceSubscribed = true;
}

function unsubscribeWorkspaceSafe(workspace) {
    if (isWorkspaceSubscribed) {
        ThemeManager.unsubscribeWorkspace(workspace);
        isWorkspaceSubscribed = false;
    }
}
Then inside dispose():

javascript
Copy
Edit
dispose() {
    unsubscribeWorkspaceSafe(this);
    // continue cleanup...
}
4️⃣ Wrap it with an Error Boundary (for safety)
Even if something slips through, you don’t want the whole app to crash.
In your App.jsx:

jsx
Copy
Edit
<ErrorBoundary>
  <YourBlocklyComponent />
</ErrorBoundary>
If you show me the actual WorkspaceSvg.dispose function code from your build,
I can give you the exact modified version ready to paste so this Cannot unsubscribe a workspace that hasn't been subscribed error never appears again.