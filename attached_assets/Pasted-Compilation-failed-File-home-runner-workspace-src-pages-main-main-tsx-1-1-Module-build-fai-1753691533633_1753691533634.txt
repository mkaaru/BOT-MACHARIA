Compilation failed

File: /home/runner/workspace/src/pages/main/main.tsx:1:1
  × Module build failed:
  ├─▶   ×   × Expected ';', '}' or <eof>
  │     │      ╭─[/home/runner/workspace/src/pages/main/main.tsx:432:1]
  │     │  429 │             ws.send(JSON.stringify(tickRequest))
  │     │  430 │           }
  │     │  431 │
  │     │  432 │ ╭─▶       ws.onmessage = (event) => {
  │     │  433 │ │           try {
  │     │  434 │ │             const data = JSON.parse(event.data)
  │     │  435 │ │             console.log('WebSocket message received:', data)
  │     │  436 │ │
  │     │  437 │ │             // Handle historical tick data
  │     │  438 │ │             if (data.history && data.history.prices) {
  │     │  439 │ │               const symbol = data.echo_req.ticks_history
  │     │  440 │ │               const prices = data.history.prices.map(price => parseFloat(price))
  │     │  441 │ │               console.log(`Received ${prices.length} historical ticks for ${symbol}`)
  │     │  442 │ │
  │     │  443 │ │               // Store historical ticks for this volatility
  │     │  444 │ │               setTickHistory(prev => ({
  │     │  445 │ │                 ...prev,
  │     │  446 │ │                 [symbol]: prices
  │     │  447 │ │               }))
  │     │  448 │ │
  │     │  449 │ │               // Set current price to latest historical tick
  │     │  450 │ │               if (prices.length > 0) {
  │     │  451 │ │                 const latestPrice = prices[prices.length - 1]
  │     │  452 │ │                 setCurrentPrice(latestPrice.toFixed(5))
  │     │  453 │ │
  │     │  454 │ │                 // Calculate distributions for historical data
  │     │  455 │ │                 calculateDigitDistribution(prices)
  │     │  456 │ │                 analyzePatterns(prices)
  │     │  457 │ │                 makePrediction(prices)
  │     │  458 │ │                 calculateContractProbabilities(prices)
  │     │  459 │ │               }
  │     │  460 │ │             }
  │     │  461 │ │
  │     │  462 │ │             // Handle real-time tick data
  │     │  463 │ │             if (data.tick && (data.tick.symbol === selectedIndex || getAlternativeSymbol(data.tick.symbol) === selectedIndex)) {
  │     │  464 │ │               console.log('Real-time tick received for', data.tick.symbol, ':', data.tick.quote)
  │     │  465 │ │               const price = parseFloat(data.tick.quote)
  │     │  466 │ │               if (!isNaN(price)) {
  │     │  467 │ │                 setCurrentPrice(price.toFixed(5))
  │     │  468 │ │                 handleNewTick(price, data.tick.symbol)
  │     │  469 │ │               }
  │     │  470 │ │             }
  │     │  471 │ │
  │     │  472 │ │             // Handle subscription confirmation
  │     │  473 │ │             if (data.msg_type === 'tick' && data.subscription) {
  │     │  474 │ │               console.log('Tick subscription confirmed for:', data.subscription.id)
  │     │  475 │ │               setCurrentPrice('Connected - Receiving ticks for ' + selectedIndex)
  │     │  476 │ │             }
  │     │  477 │ │
  │     │  478 │ │             // Handle errors
  │     │  479 │ │             if (data.error) {
  │     │  480 │ │               console.error('WebSocket API error:', data.error)
  │     │  481 │ │               setCurrentPrice(`Error: ${data.error.message}`)
  │     │  482 │ │
  │     │  483 │ │               // Try alternative symbol formats for common volatility indices
  │     │  484 │ │               if (data.error.code === 'InvalidSymbol') {
  │     │  485 │ │                 console.log('Invalid symbol, trying alternative format...')
  │     │  486 │ │                 const altSymbol = getAlternativeSymbol(selectedIndex)
  │     │  487 │ │                 if (altSymbol && altSymbol !== selectedIndex) {
  │     │  488 │ │                   console.log('Trying alternative symbol:', altSymbol)
  │     │  489 │ │                   const altRequest = {
  │     │  490 │ │                     ticks_history: altSymbol,
  │     │  491 │ │                     count: 5000,
  │     │  492 │ │                     end: 'latest',
  │     │  493 │ │                     style: 'ticks',
  │     │  494 │ │                     req_id: Date.now()
  │     │  495 │ │                   }
  │     │  496 │ │                   ws.send(JSON.stringify(altRequest))
  │     │  497 │ │                 }
  │     │  498 │ │               }
  │     │  499 │ │             }
  │     │  500 │ │
  │     │  501 │ │             // Handle forget_all response
  │     │  502 │ │             if (data.msg_type === 'forget_all') {
  │     │  503 │ │               console.log('All subscriptions forgotten successfully')
  │     │  504 │ │             }
  │     │  505 │ │           } catch (parseError) {
  │     │  506 │ │             console.error('Error parsing WebSocket message:', parseError)
  │     │  507 │ │             setCurrentPrice('Parse Error')
  │     │  508 │ │           }
  │     │  509 │ ├─▶       }```text
  │     │      · ╰───       ─
  │     │      · ╰──── This is the expression part of an expression statement
  │     │  510 │           ws.onclose = (event) => {
  │     │  511 │             console.log('WebSocket connection closed:', event.code, event.reason)
  │     │  512 │             setIsConnected(false)
  │     │      ╰────
  │     │
  │   
  ╰─▶ Syntax Error
Fix error, click outside, or press Esc to close the overlay.

Disable overlay by setting Rsbuild's dev.client.overlay config to false.