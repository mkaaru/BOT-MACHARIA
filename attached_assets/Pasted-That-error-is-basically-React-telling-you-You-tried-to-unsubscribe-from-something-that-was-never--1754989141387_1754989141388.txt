That error is basically React telling you:

“You tried to unsubscribe from something that was never subscribed in the first place.”

It’s not really about your TradeCortex meta tags — that change just happened before you hit this code path. The stack trace shows it’s coming from ThemeManager.unsubscribeWorkspace in the Deriv code, and it’s triggered when your Blockly (or similar visual workspace) is being disposed.

Why this happens
Somewhere, unsubscribeWorkspace(workspace) is being called even if subscribeWorkspace(workspace) was never run for that instance.

This usually happens when:

A workspace is mounted and unmounted very quickly.

You call dispose() on an already-disposed workspace.

The component cleanup runs twice because of React Strict Mode in development.

How to fix
You can prevent this by checking before unsubscribing:

javascript
Copy
Edit
// Before unsubscribing, check if it exists in the subscriptions
if (ThemeManager.isWorkspaceSubscribed(workspace)) {
    ThemeManager.unsubscribeWorkspace(workspace);
}
Or if ThemeManager doesn’t have that helper, track it yourself:

javascript
Copy
Edit
let subscribed = false;

function mountWorkspace(workspace) {
    ThemeManager.subscribeWorkspace(workspace);
    subscribed = true;
}

function unmountWorkspace(workspace) {
    if (subscribed) {
        ThemeManager.unsubscribeWorkspace(workspace);
        subscribed = false;
    }
}
Extra developer tip
Wrap your whole app or at least the workspace component in a React Error Boundary so the app doesn’t crash to a blank screen when errors happen.
Example:

javascript
Copy
Edit
class ErrorBoundary extends React.Component {
  state = { hasError: false };

  static getDerivedStateFromError(error) {
    return { hasError: true };
  }

  componentDidCatch(error, info) {
    console.error("Error caught by boundary:", error, info);
  }

  render() {
    if (this.state.hasError) {
      return <div>Something went wrong. Please reload.</div>;
    }
    return this.props.children;
  }
}