Compilation failed

File: /home/runner/workspace/src/services/trend-analysis-engine.ts:1:1
  × Module build failed:
  ╰─▶   ×   × the name `finalRecommendation` is defined multiple times
        │      ╭─[/home/runner/workspace/src/services/trend-analysis-engine.ts:207:1]
        │  204 │
        │  205 │         // Determine recommendation type based on signal source
        │  206 │         let recommendationType: RecommendationType = 'TREND_FOLLOWING';
        │  207 │         let finalRecommendation = recommendation;
        │      ·             ─────────┬─────────
        │      ·                      ╰── previous definition of `finalRecommendation` here
        │  208 │         let enhancedScore = score;
        │  209 │         let finalReason = 'ROC Trend Following Signal';
        │  210 │
        │  211 │         // Get Ehlers-based recommendations with Deriv market optimization
        │  212 │         const ehlersRecommendation = ehlersProcessor.generateEhlersRecommendation(symbol);
        │  213 │         const cycleTrading = ehlersProcessor.isGoodForCycleTrading(symbol);
        │  214 │
        │  215 │         // Generate Deriv-specific market signals
        │  216 │         const riseFallConfig: DerivMarketConfig = {
        │  217 │             market: 'rise_fall',
        │  218 │             duration: 5, // 5 ticks
        │  219 │             contractType: 'RISE',
        │  220 │             minConfidence: 70,
        │  221 │             maxDrawdown: 20
        │  222 │         };
        │  223 │
        │  224 │         const higherLowerConfig: DerivMarketConfig = {
        │  225 │             market: 'higher_lower',
        │  226 │             duration: 60, // 60 seconds
        │  227 │             contractType: 'HIGHER',
        │  228 │             minConfidence: 65,
        │  229 │             maxDrawdown: 15
        │  230 │         };
        │  231 │
        │  232 │         const riseFallSignal = ehlersProcessor.generateDerivSignal(symbol, riseFallConfig);
        │  233 │         const higherLowerSignal = ehlersProcessor.generateDerivSignal(symbol, higherLowerConfig);
        │  234 │
        │  235 │         const derivSignals = {
        │  236 │             riseFall: {
        │  237 │                 action: riseFallSignal.action as 'RISE' | 'FALL' | 'WAIT',
        │  238 │                 confidence: riseFallSignal.confidence,
        │  239 │                 reasoning: riseFallSignal.reasoning
        │  240 │             },
        │  241 │             higherLower: {
        │  242 │                 action: higherLowerSignal.action as 'HIGHER' | 'LOWER' | 'WAIT',
        │  243 │                 confidence: higherLowerSignal.confidence,
        │  244 │                 reasoning: higherLowerSignal.reasoning
        │  245 │             }
        │  246 │         };
        │  247 │
        │  248 │         // SIMPLIFIED TREND FOLLOWING SYSTEM ONLY
        │  249 │
        │  250 │         // VALIDATE ROC ALIGNMENT WITH RECOMMENDATION DIRECTION
        │  251 │         const validateROCAlignment = (rec: string, rocAlign: 'BULLISH' | 'BEARISH' | 'NEUTRAL'): boolean => {
        │  252 │             // For trend following, ROC alignment must match recommendation direction
        │  253 │             if (rec === 'BUY' && rocAlign !== 'BULLISH') {
        │  254 │                 console.log(`❌ ${symbol}: BUY recommendation rejected - ROC alignment is ${rocAlign}, expected BULLISH`);
        │  255 │                 return false;
        │  256 │             }
        │  257 │             if (rec === 'SELL' && rocAlign !== 'BEARISH') {
        │  258 │                 console.log(`❌ ${symbol}: SELL recommendation rejected - ROC alignment is ${rocAlign}, expected BEARISH`);
        │  259 │                 return false;
        │  260 │             }
        │  261 │             return true;
        │  262 │         };
        │  263 │
        │  264 │         // TREND FOLLOWING SIGNAL GENERATION
        │  265 │         let finalRecommendation = 'HOLD';
        │      ·             ─────────┬─────────
        │      ·                      ╰── `finalRecommendation` redefined here
        │  266 │         let enhancedScore = 0;
        │  267 │         let finalReason = 'No trend following signal';
        │      ╰────
        │   × the name `enhancedScore` is defined multiple times
        │      ╭─[/home/runner/workspace/src/services/trend-analysis-engine.ts:208:1]
        │  205 │         // Determine recommendation type based on signal source
        │  206 │         let recommendationType: RecommendationType = 'TREND_FOLLOWING';
        │  207 │         let finalRecommendation = recommendation;
        │  208 │         let enhancedScore = score;
        │      ·             ──────┬──────
        │      ·                   ╰── previous definition of `enhancedScore` here
        │  209 │         let finalReason = 'ROC Trend Following Signal';
        │  210 │
        │  211 │         // Get Ehlers-based recommendations with Deriv market optimization
        │  212 │         const ehlersRecommendation = ehlersProcessor.generateEhlersRecommendation(symbol);
        │  213 │         const cycleTrading = ehlersProcessor.isGoodForCycleTrading(symbol);
        │  214 │
        │  215 │         // Generate Deriv-specific market signals
        │  216 │         const riseFallConfig: DerivMarketConfig = {
        │  217 │             market: 'rise_fall',
        │  218 │             duration: 5, // 5 ticks
        │  219 │             contractType: 'RISE',
        │  220 │             minConfidence: 70,
        │  221 │             maxDrawdown: 20
        │  222 │         };
        │  223 │
        │  224 │         const higherLowerConfig: DerivMarketConfig = {
        │  225 │             market: 'higher_lower',
        │  226 │             duration: 60, // 60 seconds
        │  227 │             contractType: 'HIGHER',
        │  228 │             minConfidence: 65,
        │  229 │             maxDrawdown: 15
        │  230 │         };
        │  231 │
        │  232 │         const riseFallSignal = ehlersProcessor.generateDerivSignal(symbol, riseFallConfig);
        │  233 │         const higherLowerSignal = ehlersProcessor.generateDerivSignal(symbol, higherLowerConfig);
        │  234 │
        │  235 │         const derivSignals = {
        │  236 │             riseFall: {
        │  237 │                 action: riseFallSignal.action as 'RISE' | 'FALL' | 'WAIT',
        │  238 │                 confidence: riseFallSignal.confidence,
        │  239 │                 reasoning: riseFallSignal.reasoning
        │  240 │             },
        │  241 │             higherLower: {
        │  242 │                 action: higherLowerSignal.action as 'HIGHER' | 'LOWER' | 'WAIT',
        │  243 │                 confidence: higherLowerSignal.confidence,
        │  244 │                 reasoning: higherLowerSignal.reasoning
        │  245 │             }
        │  246 │         };
        │  247 │
        │  248 │         // SIMPLIFIED TREND FOLLOWING SYSTEM ONLY
        │  249 │
        │  250 │         // VALIDATE ROC ALIGNMENT WITH RECOMMENDATION DIRECTION
        │  251 │         const validateROCAlignment = (rec: string, rocAlign: 'BULLISH' | 'BEARISH' | 'NEUTRAL'): boolean => {
        │  252 │             // For trend following, ROC alignment must match recommendation direction
        │  253 │             if (rec === 'BUY' && rocAlign !== 'BULLISH') {
        │  254 │                 console.log(`❌ ${symbol}: BUY recommendation rejected - ROC alignment is ${rocAlign}, expected BULLISH`);
        │  255 │                 return false;
        │  256 │             }
        │  257 │             if (rec === 'SELL' && rocAlign !== 'BEARISH') {
        │  258 │                 console.log(`❌ ${symbol}: SELL recommendation rejected - ROC alignment is ${rocAlign}, expected BEARISH`);
        │  259 │                 return false;
        │  260 │             }
        │  261 │             return true;
        │  262 │         };
        │  263 │
        │  264 │         // TREND FOLLOWING SIGNAL GENERATION
        │  265 │         let finalRecommendation = 'HOLD';
        │  266 │         let enhancedScore = 0;
        │      ·             ──────┬──────
        │      ·                   ╰── `enhancedScore` redefined here
        │  267 │         let finalReason = 'No trend following signal';
        │  268 │
        │  269 │         // Priority 1: Strong ROC signals (TREND FOLLOWING)
        │      ╰────
        │   × the name `finalReason` is defined multiple times
        │      ╭─[/home/runner/workspace/src/services/trend-analysis-engine.ts:209:1]
        │  206 │         let recommendationType: RecommendationType = 'TREND_FOLLOWING';
        │  207 │         let finalRecommendation = recommendation;
        │  208 │         let enhancedScore = score;
        │  209 │         let finalReason = 'ROC Trend Following Signal';
        │      ·             ─────┬─────
        │      ·                  ╰── previous definition of `finalReason` here
        │  210 │
        │  211 │         // Get Ehlers-based recommendations with Deriv market optimization
        │  212 │         const ehlersRecommendation = ehlersProcessor.generateEhlersRecommendation(symbol);
        │  213 │         const cycleTrading = ehlersProcessor.isGoodForCycleTrading(symbol);
        │  214 │
        │  215 │         // Generate Deriv-specific market signals
        │  216 │         const riseFallConfig: DerivMarketConfig = {
        │  217 │             market: 'rise_fall',
        │  218 │             duration: 5, // 5 ticks
        │  219 │             contractType: 'RISE',
        │  220 │             minConfidence: 70,
        │  221 │             maxDrawdown: 20
        │  222 │         };
        │  223 │
        │  224 │         const higherLowerConfig: DerivMarketConfig = {
        │  225 │             market: 'higher_lower',
        │  226 │             duration: 60, // 60 seconds
        │  227 │             contractType: 'HIGHER',
        │  228 │             minConfidence: 65,
        │  229 │             maxDrawdown: 15
        │  230 │         };
        │  231 │
        │  232 │         const riseFallSignal = ehlersProcessor.generateDerivSignal(symbol, riseFallConfig);
        │  233 │         const higherLowerSignal = ehlersProcessor.generateDerivSignal(symbol, higherLowerConfig);
        │  234 │
        │  235 │         const derivSignals = {
        │  236 │             riseFall: {
        │  237 │                 action: riseFallSignal.action as 'RISE' | 'FALL' | 'WAIT',
        │  238 │                 confidence: riseFallSignal.confidence,
        │  239 │                 reasoning: riseFallSignal.reasoning
        │  240 │             },
        │  241 │             higherLower: {
        │  242 │                 action: higherLowerSignal.action as 'HIGHER' | 'LOWER' | 'WAIT',
        │  243 │                 confidence: higherLowerSignal.confidence,
        │  244 │                 reasoning: higherLowerSignal.reasoning
        │  245 │             }
        │  246 │         };
        │  247 │
        │  248 │         // SIMPLIFIED TREND FOLLOWING SYSTEM ONLY
        │  249 │
        │  250 │         // VALIDATE ROC ALIGNMENT WITH RECOMMENDATION DIRECTION
        │  251 │         const validateROCAlignment = (rec: string, rocAlign: 'BULLISH' | 'BEARISH' | 'NEUTRAL'): boolean => {
        │  252 │             // For trend following, ROC alignment must match recommendation direction
        │  253 │             if (rec === 'BUY' && rocAlign !== 'BULLISH') {
        │  254 │                 console.log(`❌ ${symbol}: BUY recommendation rejected - ROC alignment is ${rocAlign}, expected BULLISH`);
        │  255 │                 return false;
        │  256 │             }
        │  257 │             if (rec === 'SELL' && rocAlign !== 'BEARISH') {
        │  258 │                 console.log(`❌ ${symbol}: SELL recommendation rejected - ROC alignment is ${rocAlign}, expected BEARISH`);
        │  259 │                 return false;
        │  260 │             }
        │  261 │             return true;
        │  262 │         };
        │  263 │
        │  264 │         // TREND FOLLOWING SIGNAL GENERATION
        │  265 │         let finalRecommendation = 'HOLD';
        │  266 │         let enhancedScore = 0;
        │  267 │         let finalReason = 'No trend following signal';
        │      ·             ─────┬─────
        │      ·                  ╰── `finalReason` redefined here
        │  268 │
        │  269 │         // Priority 1: Strong ROC signals (TREND FOLLOWING)
        │  270 │         if (persistentROCSignal && confidence >= 75) {
        │      ╰────
        │
Fix error, click outside, or press Esc to close the overlay.

Disable overlay by setting Rsbuild's dev.client.overlay config to false.