WebSockets
Suggest Edits
General information
Base endpoint

To connect to Deriv's WebSocket APIs, you'll need to use the following base endpoint:

    wss://ws.derivws.com/websockets/v3?app_id={app_id}

Make sure to replace {app_id} with the unique ID of the application you registered.
Rate limits

The rate limits for API requests can change over time. To find out the current limit, you can make a server status call and check the api_call_limits field. This ensures you always have the most up-to-date information.
Session validity

Your WebSocket session will time out after 2 minutes of inactivity. If there are no requests or responses during this time, the server will close the connection. To prevent this, send requests periodically to keep the connection alive.

For example, you can send a ping request or another simple call like time at regular intervals.
Create WebSocket

To get started with WebSockets, you must first create a new WebSocket instance. Here‚Äôs how you can do it:
Create a WebSocket instance

Use the WebSocket constructor to create a new instance:

    üöß

    Warning:

    Make sure to replace {app_id} with the unique ID of the application you have registered. You can find it in the Applications tab.

let socket = new WebSocket('wss://ws.derivws.com/websockets/v3?app_id={app_id}');

    üìò

    Important: Secure vs. Unsecured Connections

    wss:// establishes a secure WebSocket connection (encrypted and protected).
    ws:// establishes an unsecured WebSocket connection (not encrypted).

Events

WebSocket communication revolves around 4 key events. Understanding these key events will help you manage the connection effectively.
OnOpen

What it does: This event is triggered when the connection to the server is successfully established.
What to know: Once this event fires, the WebSocket‚Äôs readyState property becomes 1 indicating the connection is open and ready for communication. The readyState can have several values. For more information, check out the MDN WebSocket readyState documentation.

socket.onopen = function (e) {
  console.log('[open] Connection established');
  console.log('Sending to server');
  const sendMessage = JSON.stringify({ ping: 1 });
  socket.send(sendMessage);
};

OnMessage

What it does: Fires whenever a message is received from the server.
Usage: Use this event to capture and handle incoming data from the server.

socket.onmessage = function (event) {
  console.log(`[message] Data received from server: ${event.data}`);
};

OnClose

What it does: Triggers when the WebSocket connection is closed by the client, server, or due to a connection failure.
Additional details: If you close the connection using the Close() method, you can provide a code and message to explain the reason. The server will typically send back the same code and message.

socket.onclose = function (event) {
  if (event.wasClean) {
    console.log(`[close] Connection closed cleanly, code=${event.code} reason=${event.reason}`);
  } else {
    // e.g. server process killed or network down
    // event.code is usually 1006 in this case
    console.log('[close] Connection died');
  }
};

OnError

What It does: Triggers when an error occurs with the WebSocket connection.
Handling errors: Use this event to detect and handle errors, ensuring your application can respond or retry as needed.

socket.onerror = function (error) {
  console.log(`[error] ${error.message}`);
};

Methods

Here‚Äôs a quick rundown of the essential methods you'll use with WebSockets:
Open

How it works: Call Open() to start the connection process with the server.
Non-blocking call: After OnOpen is triggered, you can begin sending messages. The call doesn‚Äôt block your script, and you can continue executing other code while waiting for the connection.
Send

Purpose: The Send method transmits data to the server. It supports several data formats, including strings and byte arrays (byte[]).
Handling large messages: For messages larger than 32,767 bytes, the WebSocket automatically splits them into fragments, managing the transmission of each part sequentially.
Close

When to use: Once you‚Äôve finished all communication, call Close() to terminate the connection.
Graceful shutdown: This ensures the connection closes properly, freeing up resources and signalling to the server that communication has ended. Once a WebSocket is closed, it cannot be reused; you‚Äôll need to create a new instance for future connections.

    üöß

    You cannot reuse a closed WebSocket instance, you have to create and set up a new one.

const app_id = 'app_id'; // Replace with your app_id.
const socket = new WebSocket(`wss://ws.derivws.com/websockets/v3?app_id=${app_id}`); // Create a new WebSocket connection using the app_id

// Event handler for when the WebSocket connection is opened
socket.onopen = function (e) {
  console.log('[open] Connection established'); // Log connection establishment
  console.log('Sending to server');

  const sendMessage = JSON.stringify({ ping: 1 }); // Create a ping message in JSON format
  socket.send(sendMessage); // Send the ping message to the server
};

// Event handler for when a message is received from the server
socket.onmessage = function (event) {
  console.log(`[message] Data received from server: ${event.data}`); // Log the message received from the server
};

// Event handler for when the WebSocket connection is closed
socket.onclose = function (event) {
  if (event.wasClean) {
    console.log(`[close] Connection closed cleanly, code=${event.code} reason=${event.reason}`); // Log clean close with code and reason
  } else {
    console.log('[close] Connection died'); // Log an abrupt close
  }
};

// Event handler for when an error occurs with the WebSocket connection
socket.onerror = function (error) {
  console.log(`[error] ${error.message}`); // Log the error that occurred
};

/*
Instructions to run this code:

1. Ensure Node.js is installed on your machine. You can download it from https://nodejs.org/.
2. Install the `ws` WebSocket library by running:
   npm install ws
3. Save this code to a file, e.g., `websocket_client.js`.
4. Open a terminal and navigate to the directory where you saved the file.
5. Run the code using the following command:
   node websocket_client.js

Ensure that the `app_id` in the URL is replaced with your own if needed.
*/

By understanding these events and methods, you can efficiently handle WebSocket connections in your application.

WebSockets provide a robust solution for real-time communication, allowing you to maintain smooth, responsive and dynamic applications.

    ‚ÑπÔ∏è

    References

    WebSocket APIs - MDN